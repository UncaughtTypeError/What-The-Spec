{"version":3,"sources":["components/Nav.js","components/Header.js","errorboundries/RouterErrorBoundry.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","icon","faCss3Alt","faHtml5","faJs","Header","RouterErrorBoundry","props","state","hasError","error","errorInfo","console","this","children","Component","Home","lazy","CSS","HTML","Javascript","Body","fallback","exact","path","component","Footer","faGithub","href","target","rel","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAkCeA,EA3BH,kBAER,6BACI,4BACI,wBAAIC,UAAU,OACV,kBAAC,IAAD,CAAMC,GAAG,QACL,kBAAC,IAAD,CAAiBC,KAAMC,MAD3B,QAKJ,wBAAIH,UAAU,QACV,kBAAC,IAAD,CAAMC,GAAG,SACL,kBAAC,IAAD,CAAiBC,KAAME,MAD3B,SAKJ,wBAAIJ,UAAU,MACV,kBAAC,IAAD,CAAMC,GAAG,eACL,kBAAC,IAAD,CAAiBC,KAAMG,MAD3B,kBCPDC,EAZA,kBAEX,gCACI,gCACI,4BAAI,mCAAJ,OAAsB,mCAAtB,MAAuC,mCAAvC,QACA,+FAEJ,kBAAC,EAAD,Q,+CCyBOC,E,YAjCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,EACVC,MAAO,MAJI,E,+EAkBDA,EAAOC,GAErBC,QAAQF,MAAMA,EAAOC,K,+BAIrB,OAAGE,KAAKL,MAAMC,SACH,qCAGJI,KAAKN,MAAMO,Y,gDAnBUJ,GAE5B,MAAO,CACHD,UAAU,EACVC,MAAOA,O,GAfcK,aCIzBC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAMD,gBAAK,kBAAM,gCACjBE,EAAOF,gBAAK,kBAAM,gCAClBG,EAAaH,gBAAK,kBAAM,gCAiBjBI,EAfF,kBAET,kBAAC,EAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAM,OAAQC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAM,QAASC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAM,cAAeC,UAAWL,QCFxCM,EAXA,kBAEX,gCACI,6CACe,6BACX,kBAAC,IAAD,CAAiBzB,KAAM0B,MAF3B,IAEwC,uBAAGC,KAAK,sDAAsDC,OAAO,SAASC,IAAI,WAAWC,MAAM,eAAc,kDCOlJC,EAVH,kBAEV,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.130bf689.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Libraries\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCss3Alt, faHtml5, faJs } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Nav = () => (\r\n\r\n    <nav>\r\n        <ul>\r\n            <li className='css'>\r\n                <Link to='/css'>\r\n                    <FontAwesomeIcon icon={faCss3Alt} />\r\n                    CSS\r\n                </Link>\r\n            </li>\r\n            <li className='html'>\r\n                <Link to='/html'>\r\n                    <FontAwesomeIcon icon={faHtml5} />\r\n                    HTML\r\n                </Link>\r\n            </li>\r\n            <li className='js'>\r\n                <Link to='/javascript'>\r\n                    <FontAwesomeIcon icon={faJs} />\r\n                    Javascript\r\n                </Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n    \r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\n// Components\r\nimport Nav from './Nav'\r\n\r\nconst Header = () => (\r\n\r\n    <header>\r\n        <hgroup>\r\n            <h1><span>W</span>hat <span>T</span>he <span>S</span>pec?</h1>\r\n            <h2>Definition on status specifications for CSS, HTML & Javascript</h2>\r\n        </hgroup>\r\n        <Nav/>\r\n    </header>\r\n\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass RouterErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            hasError: false,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    // Lifecycle method : called during render phase\r\n    static getDerivedStateFromError(error) {\r\n        // Use to update state so the next render will show the fallback UI.\r\n        return { \r\n            hasError: true,\r\n            error: error,\r\n        };\r\n    }\r\n\r\n    // Lifecycle method : called during commit phase\r\n    componentDidCatch(error, errorInfo) {\r\n        // Use for sideEffects like logging errors\r\n        console.error(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Error</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    };\r\n\r\n}\r\n\r\nexport default RouterErrorBoundry;\r\n    \r\n/*\r\n    1. getDerivedStateFromError (update state) \r\n    2. render (render fallback UI)\r\n    3. componentDidCatch (sideEffects : logs error)\r\n*/\r\n\r\n// see: https://stackoverflow.com/questions/52962851/whats-the-difference-between-getderivedstatefromerror-and-componentdidcatch","import React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n// Components\r\nimport RouterErrorBoundry from '../errorboundries/RouterErrorBoundry';\r\n\r\nconst   Home = lazy(() => import('../routes/Home')),\r\n        CSS = lazy(() => import('../routes/CSS')),\r\n        HTML = lazy(() => import('../routes/HTML')),\r\n        Javascript = lazy(() => import('../routes/Javascript'));\r\n\r\nconst Body = () => (\r\n\r\n    <RouterErrorBoundry>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <Switch>\r\n                <Route exact path='/' component={Home}/>\r\n                <Route path={'/css'} component={CSS}/>\r\n                <Route path={'/html'} component={HTML}/>\r\n                <Route path={'/javascript'} component={Javascript}/>\r\n            </Switch>\r\n        </Suspense>\r\n    </RouterErrorBoundry>\r\n\r\n);\r\n\r\nexport default Body;","import React from 'react';\r\n\r\n// Libraries\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Footer = () => (\r\n\r\n    <footer>\r\n        <small>\r\n            --- WIP ---<br/>\r\n            <FontAwesomeIcon icon={faGithub} /> <a href=\"https://github.com/UncaughtTypeError/What-The-Spec/\" target=\"_blank\" rel=\"noopener\" title=\"Github Repo\"><em>What The Spec?</em></a>\r\n        </small>\r\n    </footer>\r\n\r\n);\r\n\r\nexport default Footer;","import { BrowserRouter as Router } from 'react-router-dom';\nimport React from 'react';\n\n// Components\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport Footer from './components/Footer';\n\nconst App = () => (\n\n  <Router>\n    <Header/>\n    <Body/>\n    <Footer/>\n  </Router>\n\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}